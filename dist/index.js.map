{"version":3,"file":"index.js","sources":["../webpack://checkout/webpack/bootstrap","../webpack://checkout/./src/fs-helper.ts","../webpack://checkout/./src/regexp-helper.ts","../webpack://checkout/./src/state-helper.ts","../webpack://checkout/./src/url-helper.ts","../webpack://checkout/./src/git-auth-helper.ts","../webpack://checkout/./src/ref-helper.ts","../webpack://checkout/./src/retry-helper.ts","../webpack://checkout/./src/git-version.ts","../webpack://checkout/./src/git-command-manager.ts","../webpack://checkout/./src/git-directory-helper.ts","../webpack://checkout/./src/github-api-helper.ts","../webpack://checkout/./src/git-source-provider.ts","../webpack://checkout/./src/input-helper.ts","../webpack://checkout/./src/main.ts"],"sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import * as fs from 'fs';\r\nexport function directoryExistsSync(path, required) {\r\n    if (!path) {\r\n        throw new Error(\"Arg 'path' must not be empty\");\r\n    }\r\n    let stats;\r\n    try {\r\n        stats = fs.statSync(path);\r\n    }\r\n    catch (error) {\r\n        if (error.code === 'ENOENT') {\r\n            if (!required) {\r\n                return false;\r\n            }\r\n            throw new Error(`Directory '${path}' does not exist`);\r\n        }\r\n        throw new Error(`Encountered an error when checking whether path '${path}' exists: ${error.message}`);\r\n    }\r\n    if (stats.isDirectory()) {\r\n        return true;\r\n    }\r\n    else if (!required) {\r\n        return false;\r\n    }\r\n    throw new Error(`Directory '${path}' does not exist`);\r\n}\r\nexport function existsSync(path) {\r\n    if (!path) {\r\n        throw new Error(\"Arg 'path' must not be empty\");\r\n    }\r\n    try {\r\n        fs.statSync(path);\r\n    }\r\n    catch (error) {\r\n        if (error.code === 'ENOENT') {\r\n            return false;\r\n        }\r\n        throw new Error(`Encountered an error when checking whether path '${path}' exists: ${error.message}`);\r\n    }\r\n    return true;\r\n}\r\nexport function fileExistsSync(path) {\r\n    if (!path) {\r\n        throw new Error(\"Arg 'path' must not be empty\");\r\n    }\r\n    let stats;\r\n    try {\r\n        stats = fs.statSync(path);\r\n    }\r\n    catch (error) {\r\n        if (error.code === 'ENOENT') {\r\n            return false;\r\n        }\r\n        throw new Error(`Encountered an error when checking whether path '${path}' exists: ${error.message}`);\r\n    }\r\n    if (!stats.isDirectory()) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n","export function escape(value) {\r\n    return value.replace(/[^a-zA-Z0-9_]/g, x => {\r\n        return `\\\\${x}`;\r\n    });\r\n}\r\n","import * as coreCommand from '@actions/core/lib/command';\r\n/**\r\n * Indicates whether the POST action is running\r\n */\r\nexport const IsPost = !!process.env['STATE_isPost'];\r\n/**\r\n * The repository path for the POST action. The value is empty during the MAIN action.\r\n */\r\nexport const RepositoryPath = process.env['STATE_repositoryPath'] || '';\r\n/**\r\n * The SSH key path for the POST action. The value is empty during the MAIN action.\r\n */\r\nexport const SshKeyPath = process.env['STATE_sshKeyPath'] || '';\r\n/**\r\n * The SSH known hosts path for the POST action. The value is empty during the MAIN action.\r\n */\r\nexport const SshKnownHostsPath = process.env['STATE_sshKnownHostsPath'] || '';\r\n/**\r\n * Save the repository path so the POST action can retrieve the value.\r\n */\r\nexport function setRepositoryPath(repositoryPath) {\r\n    coreCommand.issueCommand('save-state', { name: 'repositoryPath' }, repositoryPath);\r\n}\r\n/**\r\n * Save the SSH key path so the POST action can retrieve the value.\r\n */\r\nexport function setSshKeyPath(sshKeyPath) {\r\n    coreCommand.issueCommand('save-state', { name: 'sshKeyPath' }, sshKeyPath);\r\n}\r\n/**\r\n * Save the SSH known hosts path so the POST action can retrieve the value.\r\n */\r\nexport function setSshKnownHostsPath(sshKnownHostsPath) {\r\n    coreCommand.issueCommand('save-state', { name: 'sshKnownHostsPath' }, sshKnownHostsPath);\r\n}\r\n// Publish a variable so that when the POST action runs, it can determine it should run the cleanup logic.\r\n// This is necessary since we don't have a separate entry point.\r\nif (!IsPost) {\r\n    coreCommand.issueCommand('save-state', { name: 'isPost' }, 'true');\r\n}\r\n","import * as assert from 'assert';\r\nimport { URL } from 'url';\r\nexport function getFetchUrl(settings) {\r\n    assert.ok(settings.repositoryOwner, 'settings.repositoryOwner must be defined');\r\n    assert.ok(settings.repositoryName, 'settings.repositoryName must be defined');\r\n    const serviceUrl = getServerUrl();\r\n    const encodedOwner = encodeURIComponent(settings.repositoryOwner);\r\n    const encodedName = encodeURIComponent(settings.repositoryName);\r\n    if (settings.sshKey) {\r\n        return `git@${serviceUrl.hostname}:${encodedOwner}/${encodedName}.git`;\r\n    }\r\n    // \"origin\" is SCHEME://HOSTNAME[:PORT]\r\n    return `${serviceUrl.origin}/${encodedOwner}/${encodedName}`;\r\n}\r\nexport function getServerUrl() {\r\n    // todo: remove GITHUB_URL after support for GHES Alpha is no longer needed\r\n    return new URL(process.env['GITHUB_SERVER_URL'] ||\r\n        process.env['GITHUB_URL'] ||\r\n        'https://github.com');\r\n}\r\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport * as assert from 'assert';\r\nimport * as core from '@actions/core';\r\nimport * as exec from '@actions/exec';\r\nimport * as fs from 'fs';\r\nimport * as io from '@actions/io';\r\nimport * as os from 'os';\r\nimport * as path from 'path';\r\nimport * as regexpHelper from './regexp-helper';\r\nimport * as stateHelper from './state-helper';\r\nimport * as urlHelper from './url-helper';\r\nimport { default as uuid } from 'uuid/v4';\r\nconst IS_WINDOWS = process.platform === 'win32';\r\nconst SSH_COMMAND_KEY = 'core.sshCommand';\r\nexport function createAuthHelper(git, settings) {\r\n    return new GitAuthHelper(git, settings);\r\n}\r\nclass GitAuthHelper {\r\n    constructor(gitCommandManager, gitSourceSettings) {\r\n        this.sshCommand = '';\r\n        this.sshKeyPath = '';\r\n        this.sshKnownHostsPath = '';\r\n        this.temporaryHomePath = '';\r\n        this.git = gitCommandManager;\r\n        this.settings = gitSourceSettings || {};\r\n        // Token auth header\r\n        const serverUrl = urlHelper.getServerUrl();\r\n        this.tokenConfigKey = `http.${serverUrl.origin}/.extraheader`; // \"origin\" is SCHEME://HOSTNAME[:PORT]\r\n        const basicCredential = Buffer.from(`x-access-token:${this.settings.authToken}`, 'utf8').toString('base64');\r\n        core.setSecret(basicCredential);\r\n        this.tokenPlaceholderConfigValue = `AUTHORIZATION: basic ***`;\r\n        this.tokenConfigValue = `AUTHORIZATION: basic ${basicCredential}`;\r\n        // Instead of SSH URL\r\n        this.insteadOfKey = `url.${serverUrl.origin}/.insteadOf`; // \"origin\" is SCHEME://HOSTNAME[:PORT]\r\n        this.insteadOfValue = `git@${serverUrl.hostname}:`;\r\n    }\r\n    configureAuth() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            // Remove possible previous values\r\n            yield this.removeAuth();\r\n            // Configure new values\r\n            yield this.configureSsh();\r\n            yield this.configureToken();\r\n        });\r\n    }\r\n    configureGlobalAuth() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            // Create a temp home directory\r\n            const runnerTemp = process.env['RUNNER_TEMP'] || '';\r\n            assert.ok(runnerTemp, 'RUNNER_TEMP is not defined');\r\n            const uniqueId = uuid();\r\n            this.temporaryHomePath = path.join(runnerTemp, uniqueId);\r\n            yield fs.promises.mkdir(this.temporaryHomePath, { recursive: true });\r\n            // Copy the global git config\r\n            const gitConfigPath = path.join(process.env['HOME'] || os.homedir(), '.gitconfig');\r\n            const newGitConfigPath = path.join(this.temporaryHomePath, '.gitconfig');\r\n            let configExists = false;\r\n            try {\r\n                yield fs.promises.stat(gitConfigPath);\r\n                configExists = true;\r\n            }\r\n            catch (err) {\r\n                if (err.code !== 'ENOENT') {\r\n                    throw err;\r\n                }\r\n            }\r\n            if (configExists) {\r\n                core.info(`Copying '${gitConfigPath}' to '${newGitConfigPath}'`);\r\n                yield io.cp(gitConfigPath, newGitConfigPath);\r\n            }\r\n            else {\r\n                yield fs.promises.writeFile(newGitConfigPath, '');\r\n            }\r\n            try {\r\n                // Override HOME\r\n                core.info(`Temporarily overriding HOME='${this.temporaryHomePath}' before making global git config changes`);\r\n                this.git.setEnvironmentVariable('HOME', this.temporaryHomePath);\r\n                // Configure the token\r\n                yield this.configureToken(newGitConfigPath, true);\r\n                // Configure HTTPS instead of SSH\r\n                yield this.git.tryConfigUnset(this.insteadOfKey, true);\r\n                if (!this.settings.sshKey) {\r\n                    yield this.git.config(this.insteadOfKey, this.insteadOfValue, true);\r\n                }\r\n            }\r\n            catch (err) {\r\n                // Unset in case somehow written to the real global config\r\n                core.info('Encountered an error when attempting to configure token. Attempting unconfigure.');\r\n                yield this.git.tryConfigUnset(this.tokenConfigKey, true);\r\n                throw err;\r\n            }\r\n        });\r\n    }\r\n    configureSubmoduleAuth() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            // Remove possible previous HTTPS instead of SSH\r\n            yield this.removeGitConfig(this.insteadOfKey, true);\r\n            if (this.settings.persistCredentials) {\r\n                // Configure a placeholder value. This approach avoids the credential being captured\r\n                // by process creation audit events, which are commonly logged. For more information,\r\n                // refer to https://docs.microsoft.com/en-us/windows-server/identity/ad-ds/manage/component-updates/command-line-process-auditing\r\n                const output = yield this.git.submoduleForeach(`git config --local '${this.tokenConfigKey}' '${this.tokenPlaceholderConfigValue}' && git config --local --show-origin --name-only --get-regexp remote.origin.url`, this.settings.nestedSubmodules);\r\n                // Replace the placeholder\r\n                const configPaths = output.match(/(?<=(^|\\n)file:)[^\\t]+(?=\\tremote\\.origin\\.url)/g) || [];\r\n                for (const configPath of configPaths) {\r\n                    core.debug(`Replacing token placeholder in '${configPath}'`);\r\n                    yield this.replaceTokenPlaceholder(configPath);\r\n                }\r\n                if (this.settings.sshKey) {\r\n                    // Configure core.sshCommand\r\n                    yield this.git.submoduleForeach(`git config --local '${SSH_COMMAND_KEY}' '${this.sshCommand}'`, this.settings.nestedSubmodules);\r\n                }\r\n                else {\r\n                    // Configure HTTPS instead of SSH\r\n                    yield this.git.submoduleForeach(`git config --local '${this.insteadOfKey}' '${this.insteadOfValue}'`, this.settings.nestedSubmodules);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    removeAuth() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            yield this.removeSsh();\r\n            yield this.removeToken();\r\n        });\r\n    }\r\n    removeGlobalAuth() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            core.debug(`Unsetting HOME override`);\r\n            this.git.removeEnvironmentVariable('HOME');\r\n            yield io.rmRF(this.temporaryHomePath);\r\n        });\r\n    }\r\n    configureSsh() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!this.settings.sshKey) {\r\n                return;\r\n            }\r\n            // Write key\r\n            const runnerTemp = process.env['RUNNER_TEMP'] || '';\r\n            assert.ok(runnerTemp, 'RUNNER_TEMP is not defined');\r\n            const uniqueId = uuid();\r\n            this.sshKeyPath = path.join(runnerTemp, uniqueId);\r\n            stateHelper.setSshKeyPath(this.sshKeyPath);\r\n            yield fs.promises.mkdir(runnerTemp, { recursive: true });\r\n            yield fs.promises.writeFile(this.sshKeyPath, this.settings.sshKey.trim() + '\\n', { mode: 0o600 });\r\n            // Remove inherited permissions on Windows\r\n            if (IS_WINDOWS) {\r\n                const icacls = yield io.which('icacls.exe');\r\n                yield exec.exec(`\"${icacls}\" \"${this.sshKeyPath}\" /grant:r \"${process.env['USERDOMAIN']}\\\\${process.env['USERNAME']}:F\"`);\r\n                yield exec.exec(`\"${icacls}\" \"${this.sshKeyPath}\" /inheritance:r`);\r\n            }\r\n            // Write known hosts\r\n            const userKnownHostsPath = path.join(os.homedir(), '.ssh', 'known_hosts');\r\n            let userKnownHosts = '';\r\n            try {\r\n                userKnownHosts = (yield fs.promises.readFile(userKnownHostsPath)).toString();\r\n            }\r\n            catch (err) {\r\n                if (err.code !== 'ENOENT') {\r\n                    throw err;\r\n                }\r\n            }\r\n            let knownHosts = '';\r\n            if (userKnownHosts) {\r\n                knownHosts += `# Begin from ${userKnownHostsPath}\\n${userKnownHosts}\\n# End from ${userKnownHostsPath}\\n`;\r\n            }\r\n            if (this.settings.sshKnownHosts) {\r\n                knownHosts += `# Begin from input known hosts\\n${this.settings.sshKnownHosts}\\n# end from input known hosts\\n`;\r\n            }\r\n            knownHosts += `# Begin implicitly added github.com\\ngithub.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==\\n# End implicitly added github.com\\n`;\r\n            this.sshKnownHostsPath = path.join(runnerTemp, `${uniqueId}_known_hosts`);\r\n            stateHelper.setSshKnownHostsPath(this.sshKnownHostsPath);\r\n            yield fs.promises.writeFile(this.sshKnownHostsPath, knownHosts);\r\n            // Configure GIT_SSH_COMMAND\r\n            const sshPath = yield io.which('ssh', true);\r\n            this.sshCommand = `\"${sshPath}\" -i \"$RUNNER_TEMP/${path.basename(this.sshKeyPath)}\"`;\r\n            if (this.settings.sshStrict) {\r\n                this.sshCommand += ' -o StrictHostKeyChecking=yes -o CheckHostIP=no';\r\n            }\r\n            this.sshCommand += ` -o \"UserKnownHostsFile=$RUNNER_TEMP/${path.basename(this.sshKnownHostsPath)}\"`;\r\n            core.info(`Temporarily overriding GIT_SSH_COMMAND=${this.sshCommand}`);\r\n            this.git.setEnvironmentVariable('GIT_SSH_COMMAND', this.sshCommand);\r\n            // Configure core.sshCommand\r\n            if (this.settings.persistCredentials) {\r\n                yield this.git.config(SSH_COMMAND_KEY, this.sshCommand);\r\n            }\r\n        });\r\n    }\r\n    configureToken(configPath, globalConfig) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            // Validate args\r\n            assert.ok((configPath && globalConfig) || (!configPath && !globalConfig), 'Unexpected configureToken parameter combinations');\r\n            // Default config path\r\n            if (!configPath && !globalConfig) {\r\n                configPath = path.join(this.git.getWorkingDirectory(), '.git', 'config');\r\n            }\r\n            // Configure a placeholder value. This approach avoids the credential being captured\r\n            // by process creation audit events, which are commonly logged. For more information,\r\n            // refer to https://docs.microsoft.com/en-us/windows-server/identity/ad-ds/manage/component-updates/command-line-process-auditing\r\n            yield this.git.config(this.tokenConfigKey, this.tokenPlaceholderConfigValue, globalConfig);\r\n            // Replace the placeholder\r\n            yield this.replaceTokenPlaceholder(configPath || '');\r\n        });\r\n    }\r\n    replaceTokenPlaceholder(configPath) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            assert.ok(configPath, 'configPath is not defined');\r\n            let content = (yield fs.promises.readFile(configPath)).toString();\r\n            const placeholderIndex = content.indexOf(this.tokenPlaceholderConfigValue);\r\n            if (placeholderIndex < 0 ||\r\n                placeholderIndex != content.lastIndexOf(this.tokenPlaceholderConfigValue)) {\r\n                throw new Error(`Unable to replace auth placeholder in ${configPath}`);\r\n            }\r\n            assert.ok(this.tokenConfigValue, 'tokenConfigValue is not defined');\r\n            content = content.replace(this.tokenPlaceholderConfigValue, this.tokenConfigValue);\r\n            yield fs.promises.writeFile(configPath, content);\r\n        });\r\n    }\r\n    removeSsh() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            // SSH key\r\n            const keyPath = this.sshKeyPath || stateHelper.SshKeyPath;\r\n            if (keyPath) {\r\n                try {\r\n                    yield io.rmRF(keyPath);\r\n                }\r\n                catch (err) {\r\n                    core.debug(err.message);\r\n                    core.warning(`Failed to remove SSH key '${keyPath}'`);\r\n                }\r\n            }\r\n            // SSH known hosts\r\n            const knownHostsPath = this.sshKnownHostsPath || stateHelper.SshKnownHostsPath;\r\n            if (knownHostsPath) {\r\n                try {\r\n                    yield io.rmRF(knownHostsPath);\r\n                }\r\n                catch (_a) {\r\n                    // Intentionally empty\r\n                }\r\n            }\r\n            // SSH command\r\n            yield this.removeGitConfig(SSH_COMMAND_KEY);\r\n        });\r\n    }\r\n    removeToken() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            // HTTP extra header\r\n            yield this.removeGitConfig(this.tokenConfigKey);\r\n        });\r\n    }\r\n    removeGitConfig(configKey, submoduleOnly = false) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!submoduleOnly) {\r\n                if ((yield this.git.configExists(configKey)) &&\r\n                    !(yield this.git.tryConfigUnset(configKey))) {\r\n                    // Load the config contents\r\n                    core.warning(`Failed to remove '${configKey}' from the git config`);\r\n                }\r\n            }\r\n            const pattern = regexpHelper.escape(configKey);\r\n            yield this.git.submoduleForeach(`git config --local --name-only --get-regexp '${pattern}' && git config --local --unset-all '${configKey}' || :`, true);\r\n        });\r\n    }\r\n}\r\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { URL } from 'url';\r\nimport * as core from '@actions/core';\r\nimport * as github from '@actions/github';\r\nexport const tagsRefSpec = '+refs/tags/*:refs/tags/*';\r\nexport function getCheckoutInfo(git, ref, commit) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        if (!git) {\r\n            throw new Error('Arg git cannot be empty');\r\n        }\r\n        if (!ref && !commit) {\r\n            throw new Error('Args ref and commit cannot both be empty');\r\n        }\r\n        const result = {};\r\n        const upperRef = (ref || '').toUpperCase();\r\n        // SHA only\r\n        if (!ref) {\r\n            result.ref = commit;\r\n        }\r\n        // refs/heads/\r\n        else if (upperRef.startsWith('REFS/HEADS/')) {\r\n            const branch = ref.substring('refs/heads/'.length);\r\n            result.ref = branch;\r\n            result.startPoint = `refs/remotes/origin/${branch}`;\r\n        }\r\n        // refs/pull/\r\n        else if (upperRef.startsWith('REFS/PULL/')) {\r\n            const branch = ref.substring('refs/pull/'.length);\r\n            result.ref = `refs/remotes/pull/${branch}`;\r\n        }\r\n        // refs/tags/\r\n        else if (upperRef.startsWith('REFS/')) {\r\n            result.ref = ref;\r\n        }\r\n        // Unqualified ref, check for a matching branch or tag\r\n        else {\r\n            if (yield git.branchExists(true, `origin/${ref}`)) {\r\n                result.ref = ref;\r\n                result.startPoint = `refs/remotes/origin/${ref}`;\r\n            }\r\n            else if (yield git.tagExists(`${ref}`)) {\r\n                result.ref = `refs/tags/${ref}`;\r\n            }\r\n            else {\r\n                throw new Error(`A branch or tag with the name '${ref}' could not be found`);\r\n            }\r\n        }\r\n        return result;\r\n    });\r\n}\r\nexport function getRefSpecForAllHistory(ref, commit) {\r\n    const result = ['+refs/heads/*:refs/remotes/origin/*', tagsRefSpec];\r\n    if (ref && ref.toUpperCase().startsWith('REFS/PULL/')) {\r\n        const branch = ref.substring('refs/pull/'.length);\r\n        result.push(`+${commit || ref}:refs/remotes/pull/${branch}`);\r\n    }\r\n    return result;\r\n}\r\nexport function getRefSpec(ref, commit) {\r\n    if (!ref && !commit) {\r\n        throw new Error('Args ref and commit cannot both be empty');\r\n    }\r\n    const upperRef = (ref || '').toUpperCase();\r\n    // SHA\r\n    if (commit) {\r\n        // refs/heads\r\n        if (upperRef.startsWith('REFS/HEADS/')) {\r\n            const branch = ref.substring('refs/heads/'.length);\r\n            return [`+${commit}:refs/remotes/origin/${branch}`];\r\n        }\r\n        // refs/pull/\r\n        else if (upperRef.startsWith('REFS/PULL/')) {\r\n            const branch = ref.substring('refs/pull/'.length);\r\n            return [`+${commit}:refs/remotes/pull/${branch}`];\r\n        }\r\n        // refs/tags/\r\n        else if (upperRef.startsWith('REFS/TAGS/')) {\r\n            return [`+${commit}:${ref}`];\r\n        }\r\n        // Otherwise no destination ref\r\n        else {\r\n            return [commit];\r\n        }\r\n    }\r\n    // Unqualified ref, check for a matching branch or tag\r\n    else if (!upperRef.startsWith('REFS/')) {\r\n        return [\r\n            `+refs/heads/${ref}*:refs/remotes/origin/${ref}*`,\r\n            `+refs/tags/${ref}*:refs/tags/${ref}*`\r\n        ];\r\n    }\r\n    // refs/heads/\r\n    else if (upperRef.startsWith('REFS/HEADS/')) {\r\n        const branch = ref.substring('refs/heads/'.length);\r\n        return [`+${ref}:refs/remotes/origin/${branch}`];\r\n    }\r\n    // refs/pull/\r\n    else if (upperRef.startsWith('REFS/PULL/')) {\r\n        const branch = ref.substring('refs/pull/'.length);\r\n        return [`+${ref}:refs/remotes/pull/${branch}`];\r\n    }\r\n    // refs/tags/\r\n    else {\r\n        return [`+${ref}:${ref}`];\r\n    }\r\n}\r\n/**\r\n * Tests whether the initial fetch created the ref at the expected commit\r\n */\r\nexport function testRef(git, ref, commit) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        if (!git) {\r\n            throw new Error('Arg git cannot be empty');\r\n        }\r\n        if (!ref && !commit) {\r\n            throw new Error('Args ref and commit cannot both be empty');\r\n        }\r\n        // No SHA? Nothing to test\r\n        if (!commit) {\r\n            return true;\r\n        }\r\n        // SHA only?\r\n        else if (!ref) {\r\n            return yield git.shaExists(commit);\r\n        }\r\n        const upperRef = ref.toUpperCase();\r\n        // refs/heads/\r\n        if (upperRef.startsWith('REFS/HEADS/')) {\r\n            const branch = ref.substring('refs/heads/'.length);\r\n            return ((yield git.branchExists(true, `origin/${branch}`)) &&\r\n                commit === (yield git.revParse(`refs/remotes/origin/${branch}`)));\r\n        }\r\n        // refs/pull/\r\n        else if (upperRef.startsWith('REFS/PULL/')) {\r\n            // Assume matches because fetched using the commit\r\n            return true;\r\n        }\r\n        // refs/tags/\r\n        else if (upperRef.startsWith('REFS/TAGS/')) {\r\n            const tagName = ref.substring('refs/tags/'.length);\r\n            return ((yield git.tagExists(tagName)) && commit === (yield git.revParse(ref)));\r\n        }\r\n        // Unexpected\r\n        else {\r\n            core.debug(`Unexpected ref format '${ref}' when testing ref info`);\r\n            return true;\r\n        }\r\n    });\r\n}\r\nexport function checkCommitInfo(token, commitInfo, repositoryOwner, repositoryName, ref, commit) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            // GHES?\r\n            if (isGhes()) {\r\n                return;\r\n            }\r\n            // Auth token?\r\n            if (!token) {\r\n                return;\r\n            }\r\n            // Public PR synchronize, for workflow repo?\r\n            if (fromPayload('repository.private') !== false ||\r\n                github.context.eventName !== 'pull_request' ||\r\n                fromPayload('action') !== 'synchronize' ||\r\n                repositoryOwner !== github.context.repo.owner ||\r\n                repositoryName !== github.context.repo.repo ||\r\n                ref !== github.context.ref ||\r\n                !ref.startsWith('refs/pull/') ||\r\n                commit !== github.context.sha) {\r\n                return;\r\n            }\r\n            // Head SHA\r\n            const expectedHeadSha = fromPayload('after');\r\n            if (!expectedHeadSha) {\r\n                core.debug('Unable to determine head sha');\r\n                return;\r\n            }\r\n            // Base SHA\r\n            const expectedBaseSha = fromPayload('pull_request.base.sha');\r\n            if (!expectedBaseSha) {\r\n                core.debug('Unable to determine base sha');\r\n                return;\r\n            }\r\n            // Expected message?\r\n            const expectedMessage = `Merge ${expectedHeadSha} into ${expectedBaseSha}`;\r\n            if (commitInfo.indexOf(expectedMessage) >= 0) {\r\n                return;\r\n            }\r\n            // Extract details from message\r\n            const match = commitInfo.match(/Merge ([0-9a-f]{40}) into ([0-9a-f]{40})/);\r\n            if (!match) {\r\n                core.debug('Unexpected message format');\r\n                return;\r\n            }\r\n            // Post telemetry\r\n            const actualHeadSha = match[1];\r\n            if (actualHeadSha !== expectedHeadSha) {\r\n                core.debug(`Expected head sha ${expectedHeadSha}; actual head sha ${actualHeadSha}`);\r\n                const octokit = new github.GitHub(token, {\r\n                    userAgent: `actions-checkout-tracepoint/1.0 (code=STALE_MERGE;owner=${repositoryOwner};repo=${repositoryName};pr=${fromPayload('number')};run_id=${process.env['GITHUB_RUN_ID']};expected_head_sha=${expectedHeadSha};actual_head_sha=${actualHeadSha})`\r\n                });\r\n                yield octokit.repos.get({ owner: repositoryOwner, repo: repositoryName });\r\n            }\r\n        }\r\n        catch (err) {\r\n            core.debug(`Error when validating commit info: ${err.stack}`);\r\n        }\r\n    });\r\n}\r\nfunction fromPayload(path) {\r\n    return select(github.context.payload, path);\r\n}\r\nfunction select(obj, path) {\r\n    if (!obj) {\r\n        return undefined;\r\n    }\r\n    const i = path.indexOf('.');\r\n    if (i < 0) {\r\n        return obj[path];\r\n    }\r\n    const key = path.substr(0, i);\r\n    return select(obj[key], path.substr(i + 1));\r\n}\r\nfunction isGhes() {\r\n    const ghUrl = new URL(process.env['GITHUB_SERVER_URL'] || 'https://github.com');\r\n    return ghUrl.hostname.toUpperCase() !== 'GITHUB.COM';\r\n}\r\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport * as core from '@actions/core';\r\nconst defaultMaxAttempts = 3;\r\nconst defaultMinSeconds = 10;\r\nconst defaultMaxSeconds = 20;\r\nexport class RetryHelper {\r\n    constructor(maxAttempts = defaultMaxAttempts, minSeconds = defaultMinSeconds, maxSeconds = defaultMaxSeconds) {\r\n        this.maxAttempts = maxAttempts;\r\n        this.minSeconds = Math.floor(minSeconds);\r\n        this.maxSeconds = Math.floor(maxSeconds);\r\n        if (this.minSeconds > this.maxSeconds) {\r\n            throw new Error('min seconds should be less than or equal to max seconds');\r\n        }\r\n    }\r\n    execute(action) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let attempt = 1;\r\n            while (attempt < this.maxAttempts) {\r\n                // Try\r\n                try {\r\n                    return yield action();\r\n                }\r\n                catch (err) {\r\n                    core.info(err.message);\r\n                }\r\n                // Sleep\r\n                const seconds = this.getSleepAmount();\r\n                core.info(`Waiting ${seconds} seconds before trying again`);\r\n                yield this.sleep(seconds);\r\n                attempt++;\r\n            }\r\n            // Last attempt\r\n            return yield action();\r\n        });\r\n    }\r\n    getSleepAmount() {\r\n        return (Math.floor(Math.random() * (this.maxSeconds - this.minSeconds + 1)) +\r\n            this.minSeconds);\r\n    }\r\n    sleep(seconds) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise(resolve => setTimeout(resolve, seconds * 1000));\r\n        });\r\n    }\r\n}\r\nexport function execute(action) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const retryHelper = new RetryHelper();\r\n        return yield retryHelper.execute(action);\r\n    });\r\n}\r\n","export class GitVersion {\r\n    /**\r\n     * Used for comparing the version of git and git-lfs against the minimum required version\r\n     * @param version the version string, e.g. 1.2 or 1.2.3\r\n     */\r\n    constructor(version) {\r\n        this.major = NaN;\r\n        this.minor = NaN;\r\n        this.patch = NaN;\r\n        if (version) {\r\n            const match = version.match(/^(\\d+)\\.(\\d+)(\\.(\\d+))?$/);\r\n            if (match) {\r\n                this.major = Number(match[1]);\r\n                this.minor = Number(match[2]);\r\n                if (match[4]) {\r\n                    this.patch = Number(match[4]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Compares the instance against a minimum required version\r\n     * @param minimum Minimum version\r\n     */\r\n    checkMinimum(minimum) {\r\n        if (!minimum.isValid()) {\r\n            throw new Error('Arg minimum is not a valid version');\r\n        }\r\n        // Major is insufficient\r\n        if (this.major < minimum.major) {\r\n            return false;\r\n        }\r\n        // Major is equal\r\n        if (this.major === minimum.major) {\r\n            // Minor is insufficient\r\n            if (this.minor < minimum.minor) {\r\n                return false;\r\n            }\r\n            // Minor is equal\r\n            if (this.minor === minimum.minor) {\r\n                // Patch is insufficient\r\n                if (this.patch && this.patch < (minimum.patch || 0)) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Indicates whether the instance was constructed from a valid version string\r\n     */\r\n    isValid() {\r\n        return !isNaN(this.major);\r\n    }\r\n    /**\r\n     * Returns the version as a string, e.g. 1.2 or 1.2.3\r\n     */\r\n    toString() {\r\n        let result = '';\r\n        if (this.isValid()) {\r\n            result = `${this.major}.${this.minor}`;\r\n            if (!isNaN(this.patch)) {\r\n                result += `.${this.patch}`;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}\r\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport * as core from '@actions/core';\r\nimport * as exec from '@actions/exec';\r\nimport * as fshelper from './fs-helper';\r\nimport * as io from '@actions/io';\r\nimport * as path from 'path';\r\nimport * as refHelper from './ref-helper';\r\nimport * as regexpHelper from './regexp-helper';\r\nimport * as retryHelper from './retry-helper';\r\nimport { GitVersion } from './git-version';\r\n// Auth header not supported before 2.9\r\n// Wire protocol v2 not supported before 2.18\r\nexport const MinimumGitVersion = new GitVersion('2.18');\r\nexport function createCommandManager(workingDirectory, lfs) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        return yield GitCommandManager.createCommandManager(workingDirectory, lfs);\r\n    });\r\n}\r\nclass GitCommandManager {\r\n    // Private constructor; use createCommandManager()\r\n    constructor() {\r\n        this.gitEnv = {\r\n            GIT_TERMINAL_PROMPT: '0',\r\n            GCM_INTERACTIVE: 'Never' // Disable prompting for git credential manager\r\n        };\r\n        this.gitPath = '';\r\n        this.lfs = false;\r\n        this.workingDirectory = '';\r\n    }\r\n    branchDelete(remote, branch) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const args = ['branch', '--delete', '--force'];\r\n            if (remote) {\r\n                args.push('--remote');\r\n            }\r\n            args.push(branch);\r\n            yield this.execGit(args);\r\n        });\r\n    }\r\n    branchExists(remote, pattern) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const args = ['branch', '--list'];\r\n            if (remote) {\r\n                args.push('--remote');\r\n            }\r\n            args.push(pattern);\r\n            const output = yield this.execGit(args);\r\n            return !!output.stdout.trim();\r\n        });\r\n    }\r\n    branchList(remote) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const result = [];\r\n            // Note, this implementation uses \"rev-parse --symbolic-full-name\" because the output from\r\n            // \"branch --list\" is more difficult when in a detached HEAD state.\r\n            // Note, this implementation uses \"rev-parse --symbolic-full-name\" because there is a bug\r\n            // in Git 2.18 that causes \"rev-parse --symbolic\" to output symbolic full names.\r\n            const args = ['rev-parse', '--symbolic-full-name'];\r\n            if (remote) {\r\n                args.push('--remotes=origin');\r\n            }\r\n            else {\r\n                args.push('--branches');\r\n            }\r\n            const output = yield this.execGit(args);\r\n            for (let branch of output.stdout.trim().split('\\n')) {\r\n                branch = branch.trim();\r\n                if (branch) {\r\n                    if (branch.startsWith('refs/heads/')) {\r\n                        branch = branch.substr('refs/heads/'.length);\r\n                    }\r\n                    else if (branch.startsWith('refs/remotes/')) {\r\n                        branch = branch.substr('refs/remotes/'.length);\r\n                    }\r\n                    result.push(branch);\r\n                }\r\n            }\r\n            return result;\r\n        });\r\n    }\r\n    checkout(ref, startPoint) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const args = ['checkout', '--progress', '--force'];\r\n            if (startPoint) {\r\n                args.push('-B', ref, startPoint);\r\n            }\r\n            else {\r\n                args.push(ref);\r\n            }\r\n            yield this.execGit(args);\r\n        });\r\n    }\r\n    checkoutDetach() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const args = ['checkout', '--detach'];\r\n            yield this.execGit(args);\r\n        });\r\n    }\r\n    config(configKey, configValue, globalConfig) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            yield this.execGit([\r\n                'config',\r\n                globalConfig ? '--global' : '--local',\r\n                configKey,\r\n                configValue\r\n            ]);\r\n        });\r\n    }\r\n    configExists(configKey, globalConfig) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const pattern = regexpHelper.escape(configKey);\r\n            const output = yield this.execGit([\r\n                'config',\r\n                globalConfig ? '--global' : '--local',\r\n                '--name-only',\r\n                '--get-regexp',\r\n                pattern\r\n            ], true);\r\n            return output.exitCode === 0;\r\n        });\r\n    }\r\n    fetch(refSpec, fetchDepth) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const args = ['-c', 'protocol.version=2', 'fetch'];\r\n            if (!refSpec.some(x => x === refHelper.tagsRefSpec)) {\r\n                args.push('--no-tags');\r\n            }\r\n            args.push('--prune', '--progress', '--no-recurse-submodules');\r\n            if (fetchDepth && fetchDepth > 0) {\r\n                args.push(`--depth=${fetchDepth}`);\r\n            }\r\n            else if (fshelper.fileExistsSync(path.join(this.workingDirectory, '.git', 'shallow'))) {\r\n                args.push('--unshallow');\r\n            }\r\n            args.push('origin');\r\n            for (const arg of refSpec) {\r\n                args.push(arg);\r\n            }\r\n            const that = this;\r\n            yield retryHelper.execute(() => __awaiter(this, void 0, void 0, function* () {\r\n                yield that.execGit(args);\r\n            }));\r\n        });\r\n    }\r\n    getDefaultBranch(repositoryUrl) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let output;\r\n            yield retryHelper.execute(() => __awaiter(this, void 0, void 0, function* () {\r\n                output = yield this.execGit([\r\n                    'ls-remote',\r\n                    '--quiet',\r\n                    '--exit-code',\r\n                    '--symref',\r\n                    repositoryUrl,\r\n                    'HEAD'\r\n                ]);\r\n            }));\r\n            if (output) {\r\n                // Satisfy compiler, will always be set\r\n                for (let line of output.stdout.trim().split('\\n')) {\r\n                    line = line.trim();\r\n                    if (line.startsWith('ref:') || line.endsWith('HEAD')) {\r\n                        return line\r\n                            .substr('ref:'.length, line.length - 'ref:'.length - 'HEAD'.length)\r\n                            .trim();\r\n                    }\r\n                }\r\n            }\r\n            throw new Error('Unexpected output when retrieving default branch');\r\n        });\r\n    }\r\n    getWorkingDirectory() {\r\n        return this.workingDirectory;\r\n    }\r\n    init() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            yield this.execGit(['init', this.workingDirectory]);\r\n        });\r\n    }\r\n    isDetached() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            // Note, \"branch --show-current\" would be simpler but isn't available until Git 2.22\r\n            const output = yield this.execGit(['rev-parse', '--symbolic-full-name', '--verify', '--quiet', 'HEAD'], true);\r\n            return !output.stdout.trim().startsWith('refs/heads/');\r\n        });\r\n    }\r\n    lfsFetch(ref) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const args = ['lfs', 'fetch', 'origin', ref];\r\n            const that = this;\r\n            yield retryHelper.execute(() => __awaiter(this, void 0, void 0, function* () {\r\n                yield that.execGit(args);\r\n            }));\r\n        });\r\n    }\r\n    lfsInstall() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            yield this.execGit(['lfs', 'install', '--local']);\r\n        });\r\n    }\r\n    log1(format) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            var args = format ? ['log', '-1', format] : ['log', '-1'];\r\n            var silent = format ? false : true;\r\n            const output = yield this.execGit(args, false, silent);\r\n            return output.stdout;\r\n        });\r\n    }\r\n    remoteAdd(remoteName, remoteUrl) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            yield this.execGit(['remote', 'add', remoteName, remoteUrl]);\r\n        });\r\n    }\r\n    removeEnvironmentVariable(name) {\r\n        delete this.gitEnv[name];\r\n    }\r\n    /**\r\n     * Resolves a ref to a SHA. For a branch or lightweight tag, the commit SHA is returned.\r\n     * For an annotated tag, the tag SHA is returned.\r\n     * @param {string} ref  For example: 'refs/heads/main' or '/refs/tags/v1'\r\n     * @returns {Promise<string>}\r\n     */\r\n    revParse(ref) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const output = yield this.execGit(['rev-parse', ref]);\r\n            return output.stdout.trim();\r\n        });\r\n    }\r\n    setEnvironmentVariable(name, value) {\r\n        this.gitEnv[name] = value;\r\n    }\r\n    shaExists(sha) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const args = ['rev-parse', '--verify', '--quiet', `${sha}^{object}`];\r\n            const output = yield this.execGit(args, true);\r\n            return output.exitCode === 0;\r\n        });\r\n    }\r\n    submoduleForeach(command, recursive) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const args = ['submodule', 'foreach'];\r\n            if (recursive) {\r\n                args.push('--recursive');\r\n            }\r\n            args.push(command);\r\n            const output = yield this.execGit(args);\r\n            return output.stdout;\r\n        });\r\n    }\r\n    submoduleSync(recursive) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const args = ['submodule', 'sync'];\r\n            if (recursive) {\r\n                args.push('--recursive');\r\n            }\r\n            yield this.execGit(args);\r\n        });\r\n    }\r\n    submoduleUpdate(fetchDepth, recursive) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const args = ['-c', 'protocol.version=2'];\r\n            args.push('submodule', 'update', '--init', '--force');\r\n            if (fetchDepth > 0) {\r\n                args.push(`--depth=${fetchDepth}`);\r\n            }\r\n            if (recursive) {\r\n                args.push('--recursive');\r\n            }\r\n            yield this.execGit(args);\r\n        });\r\n    }\r\n    tagExists(pattern) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const output = yield this.execGit(['tag', '--list', pattern]);\r\n            return !!output.stdout.trim();\r\n        });\r\n    }\r\n    tryClean() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const output = yield this.execGit(['clean', '-ffdx'], true);\r\n            return output.exitCode === 0;\r\n        });\r\n    }\r\n    tryConfigUnset(configKey, globalConfig) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const output = yield this.execGit([\r\n                'config',\r\n                globalConfig ? '--global' : '--local',\r\n                '--unset-all',\r\n                configKey\r\n            ], true);\r\n            return output.exitCode === 0;\r\n        });\r\n    }\r\n    tryDisableAutomaticGarbageCollection() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const output = yield this.execGit(['config', '--local', 'gc.auto', '0'], true);\r\n            return output.exitCode === 0;\r\n        });\r\n    }\r\n    tryGetFetchUrl() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const output = yield this.execGit(['config', '--local', '--get', 'remote.origin.url'], true);\r\n            if (output.exitCode !== 0) {\r\n                return '';\r\n            }\r\n            const stdout = output.stdout.trim();\r\n            if (stdout.includes('\\n')) {\r\n                return '';\r\n            }\r\n            return stdout;\r\n        });\r\n    }\r\n    tryReset() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const output = yield this.execGit(['reset', '--hard', 'HEAD'], true);\r\n            return output.exitCode === 0;\r\n        });\r\n    }\r\n    static createCommandManager(workingDirectory, lfs) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const result = new GitCommandManager();\r\n            yield result.initializeCommandManager(workingDirectory, lfs);\r\n            return result;\r\n        });\r\n    }\r\n    execGit(args, allowAllExitCodes = false, silent = false) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            fshelper.directoryExistsSync(this.workingDirectory, true);\r\n            const result = new GitOutput();\r\n            const env = {};\r\n            for (const key of Object.keys(process.env)) {\r\n                env[key] = process.env[key];\r\n            }\r\n            for (const key of Object.keys(this.gitEnv)) {\r\n                env[key] = this.gitEnv[key];\r\n            }\r\n            const stdout = [];\r\n            const options = {\r\n                cwd: this.workingDirectory,\r\n                env,\r\n                silent,\r\n                ignoreReturnCode: allowAllExitCodes,\r\n                listeners: {\r\n                    stdout: (data) => {\r\n                        stdout.push(data.toString());\r\n                    }\r\n                }\r\n            };\r\n            result.exitCode = yield exec.exec(`\"${this.gitPath}\"`, args, options);\r\n            result.stdout = stdout.join('');\r\n            return result;\r\n        });\r\n    }\r\n    initializeCommandManager(workingDirectory, lfs) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.workingDirectory = workingDirectory;\r\n            // Git-lfs will try to pull down assets if any of the local/user/system setting exist.\r\n            // If the user didn't enable `LFS` in their pipeline definition, disable LFS fetch/checkout.\r\n            this.lfs = lfs;\r\n            if (!this.lfs) {\r\n                this.gitEnv['GIT_LFS_SKIP_SMUDGE'] = '1';\r\n            }\r\n            this.gitPath = yield io.which('git', true);\r\n            // Git version\r\n            core.debug('Getting git version');\r\n            let gitVersion = new GitVersion();\r\n            let gitOutput = yield this.execGit(['version']);\r\n            let stdout = gitOutput.stdout.trim();\r\n            if (!stdout.includes('\\n')) {\r\n                const match = stdout.match(/\\d+\\.\\d+(\\.\\d+)?/);\r\n                if (match) {\r\n                    gitVersion = new GitVersion(match[0]);\r\n                }\r\n            }\r\n            if (!gitVersion.isValid()) {\r\n                throw new Error('Unable to determine git version');\r\n            }\r\n            // Minimum git version\r\n            if (!gitVersion.checkMinimum(MinimumGitVersion)) {\r\n                throw new Error(`Minimum required git version is ${MinimumGitVersion}. Your git ('${this.gitPath}') is ${gitVersion}`);\r\n            }\r\n            if (this.lfs) {\r\n                // Git-lfs version\r\n                core.debug('Getting git-lfs version');\r\n                let gitLfsVersion = new GitVersion();\r\n                const gitLfsPath = yield io.which('git-lfs', true);\r\n                gitOutput = yield this.execGit(['lfs', 'version']);\r\n                stdout = gitOutput.stdout.trim();\r\n                if (!stdout.includes('\\n')) {\r\n                    const match = stdout.match(/\\d+\\.\\d+(\\.\\d+)?/);\r\n                    if (match) {\r\n                        gitLfsVersion = new GitVersion(match[0]);\r\n                    }\r\n                }\r\n                if (!gitLfsVersion.isValid()) {\r\n                    throw new Error('Unable to determine git-lfs version');\r\n                }\r\n                // Minimum git-lfs version\r\n                // Note:\r\n                // - Auth header not supported before 2.1\r\n                const minimumGitLfsVersion = new GitVersion('2.1');\r\n                if (!gitLfsVersion.checkMinimum(minimumGitLfsVersion)) {\r\n                    throw new Error(`Minimum required git-lfs version is ${minimumGitLfsVersion}. Your git-lfs ('${gitLfsPath}') is ${gitLfsVersion}`);\r\n                }\r\n            }\r\n            // Set the user agent\r\n            const gitHttpUserAgent = `git/${gitVersion} (github-actions-checkout)`;\r\n            core.debug(`Set git useragent to: ${gitHttpUserAgent}`);\r\n            this.gitEnv['GIT_HTTP_USER_AGENT'] = gitHttpUserAgent;\r\n        });\r\n    }\r\n}\r\nclass GitOutput {\r\n    constructor() {\r\n        this.stdout = '';\r\n        this.exitCode = 0;\r\n    }\r\n}\r\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport * as assert from 'assert';\r\nimport * as core from '@actions/core';\r\nimport * as fs from 'fs';\r\nimport * as fsHelper from './fs-helper';\r\nimport * as io from '@actions/io';\r\nimport * as path from 'path';\r\nexport function prepareExistingDirectory(git, repositoryPath, repositoryUrl, clean, ref) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        assert.ok(repositoryPath, 'Expected repositoryPath to be defined');\r\n        assert.ok(repositoryUrl, 'Expected repositoryUrl to be defined');\r\n        // Indicates whether to delete the directory contents\r\n        let remove = false;\r\n        // Check whether using git or REST API\r\n        if (!git) {\r\n            remove = true;\r\n        }\r\n        // Fetch URL does not match\r\n        else if (!fsHelper.directoryExistsSync(path.join(repositoryPath, '.git')) ||\r\n            repositoryUrl !== (yield git.tryGetFetchUrl())) {\r\n            remove = true;\r\n        }\r\n        else {\r\n            // Delete any index.lock and shallow.lock left by a previously canceled run or crashed git process\r\n            const lockPaths = [\r\n                path.join(repositoryPath, '.git', 'index.lock'),\r\n                path.join(repositoryPath, '.git', 'shallow.lock')\r\n            ];\r\n            for (const lockPath of lockPaths) {\r\n                try {\r\n                    yield io.rmRF(lockPath);\r\n                }\r\n                catch (error) {\r\n                    core.debug(`Unable to delete '${lockPath}'. ${error.message}`);\r\n                }\r\n            }\r\n            try {\r\n                core.startGroup('Removing previously created refs, to avoid conflicts');\r\n                // Checkout detached HEAD\r\n                if (!(yield git.isDetached())) {\r\n                    yield git.checkoutDetach();\r\n                }\r\n                // Remove all refs/heads/*\r\n                let branches = yield git.branchList(false);\r\n                for (const branch of branches) {\r\n                    yield git.branchDelete(false, branch);\r\n                }\r\n                // Remove any conflicting refs/remotes/origin/*\r\n                // Example 1: Consider ref is refs/heads/foo and previously fetched refs/remotes/origin/foo/bar\r\n                // Example 2: Consider ref is refs/heads/foo/bar and previously fetched refs/remotes/origin/foo\r\n                if (ref) {\r\n                    ref = ref.startsWith('refs/') ? ref : `refs/heads/${ref}`;\r\n                    if (ref.startsWith('refs/heads/')) {\r\n                        const upperName1 = ref.toUpperCase().substr('REFS/HEADS/'.length);\r\n                        const upperName1Slash = `${upperName1}/`;\r\n                        branches = yield git.branchList(true);\r\n                        for (const branch of branches) {\r\n                            const upperName2 = branch.substr('origin/'.length).toUpperCase();\r\n                            const upperName2Slash = `${upperName2}/`;\r\n                            if (upperName1.startsWith(upperName2Slash) ||\r\n                                upperName2.startsWith(upperName1Slash)) {\r\n                                yield git.branchDelete(true, branch);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                core.endGroup();\r\n                // Clean\r\n                if (clean) {\r\n                    core.startGroup('Cleaning the repository');\r\n                    if (!(yield git.tryClean())) {\r\n                        core.debug(`The clean command failed. This might be caused by: 1) path too long, 2) permission issue, or 3) file in use. For futher investigation, manually run 'git clean -ffdx' on the directory '${repositoryPath}'.`);\r\n                        remove = true;\r\n                    }\r\n                    else if (!(yield git.tryReset())) {\r\n                        remove = true;\r\n                    }\r\n                    core.endGroup();\r\n                    if (remove) {\r\n                        core.warning(`Unable to clean or reset the repository. The repository will be recreated instead.`);\r\n                    }\r\n                }\r\n            }\r\n            catch (error) {\r\n                core.warning(`Unable to prepare the existing repository. The repository will be recreated instead.`);\r\n                remove = true;\r\n            }\r\n        }\r\n        if (remove) {\r\n            // Delete the contents of the directory. Don't delete the directory itself\r\n            // since it might be the current working directory.\r\n            core.info(`Deleting the contents of '${repositoryPath}'`);\r\n            for (const file of yield fs.promises.readdir(repositoryPath)) {\r\n                yield io.rmRF(path.join(repositoryPath, file));\r\n            }\r\n        }\r\n    });\r\n}\r\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport * as assert from 'assert';\r\nimport * as core from '@actions/core';\r\nimport * as fs from 'fs';\r\nimport * as github from '@actions/github';\r\nimport * as io from '@actions/io';\r\nimport * as path from 'path';\r\nimport * as retryHelper from './retry-helper';\r\nimport * as toolCache from '@actions/tool-cache';\r\nimport { default as uuid } from 'uuid/v4';\r\nconst IS_WINDOWS = process.platform === 'win32';\r\nexport function downloadRepository(authToken, owner, repo, ref, commit, repositoryPath) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        // Determine the default branch\r\n        if (!ref && !commit) {\r\n            core.info('Determining the default branch');\r\n            ref = yield getDefaultBranch(authToken, owner, repo);\r\n        }\r\n        // Download the archive\r\n        let archiveData = yield retryHelper.execute(() => __awaiter(this, void 0, void 0, function* () {\r\n            core.info('Downloading the archive');\r\n            return yield downloadArchive(authToken, owner, repo, ref, commit);\r\n        }));\r\n        // Write archive to disk\r\n        core.info('Writing archive to disk');\r\n        const uniqueId = uuid();\r\n        const archivePath = path.join(repositoryPath, `${uniqueId}.tar.gz`);\r\n        yield fs.promises.writeFile(archivePath, archiveData);\r\n        archiveData = Buffer.from(''); // Free memory\r\n        // Extract archive\r\n        core.info('Extracting the archive');\r\n        const extractPath = path.join(repositoryPath, uniqueId);\r\n        yield io.mkdirP(extractPath);\r\n        if (IS_WINDOWS) {\r\n            yield toolCache.extractZip(archivePath, extractPath);\r\n        }\r\n        else {\r\n            yield toolCache.extractTar(archivePath, extractPath);\r\n        }\r\n        yield io.rmRF(archivePath);\r\n        // Determine the path of the repository content. The archive contains\r\n        // a top-level folder and the repository content is inside.\r\n        const archiveFileNames = yield fs.promises.readdir(extractPath);\r\n        assert.ok(archiveFileNames.length == 1, 'Expected exactly one directory inside archive');\r\n        const archiveVersion = archiveFileNames[0]; // The top-level folder name includes the short SHA\r\n        core.info(`Resolved version ${archiveVersion}`);\r\n        const tempRepositoryPath = path.join(extractPath, archiveVersion);\r\n        // Move the files\r\n        for (const fileName of yield fs.promises.readdir(tempRepositoryPath)) {\r\n            const sourcePath = path.join(tempRepositoryPath, fileName);\r\n            const targetPath = path.join(repositoryPath, fileName);\r\n            if (IS_WINDOWS) {\r\n                yield io.cp(sourcePath, targetPath, { recursive: true }); // Copy on Windows (Windows Defender may have a lock)\r\n            }\r\n            else {\r\n                yield io.mv(sourcePath, targetPath);\r\n            }\r\n        }\r\n        yield io.rmRF(extractPath);\r\n    });\r\n}\r\n/**\r\n * Looks up the default branch name\r\n */\r\nexport function getDefaultBranch(authToken, owner, repo) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        return yield retryHelper.execute(() => __awaiter(this, void 0, void 0, function* () {\r\n            core.info('Retrieving the default branch name');\r\n            const octokit = new github.GitHub(authToken);\r\n            let result;\r\n            try {\r\n                // Get the default branch from the repo info\r\n                const response = yield octokit.repos.get({ owner, repo });\r\n                result = response.data.default_branch;\r\n                assert.ok(result, 'default_branch cannot be empty');\r\n            }\r\n            catch (err) {\r\n                // Handle .wiki repo\r\n                if (err['status'] === 404 && repo.toUpperCase().endsWith('.WIKI')) {\r\n                    result = 'master';\r\n                }\r\n                // Otherwise error\r\n                else {\r\n                    throw err;\r\n                }\r\n            }\r\n            // Print the default branch\r\n            core.info(`Default branch '${result}'`);\r\n            // Prefix with 'refs/heads'\r\n            if (!result.startsWith('refs/')) {\r\n                result = `refs/heads/${result}`;\r\n            }\r\n            return result;\r\n        }));\r\n    });\r\n}\r\nfunction downloadArchive(authToken, owner, repo, ref, commit) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const octokit = new github.GitHub(authToken);\r\n        const params = {\r\n            owner: owner,\r\n            repo: repo,\r\n            archive_format: IS_WINDOWS ? 'zipball' : 'tarball',\r\n            ref: commit || ref\r\n        };\r\n        const response = yield octokit.repos.getArchiveLink(params);\r\n        if (response.status != 200) {\r\n            throw new Error(`Unexpected response from GitHub API. Status: ${response.status}, Data: ${response.data}`);\r\n        }\r\n        return Buffer.from(response.data); // response.data is ArrayBuffer\r\n    });\r\n}\r\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport * as core from '@actions/core';\r\nimport * as fsHelper from './fs-helper';\r\nimport * as gitAuthHelper from './git-auth-helper';\r\nimport * as gitCommandManager from './git-command-manager';\r\nimport * as gitDirectoryHelper from './git-directory-helper';\r\nimport * as githubApiHelper from './github-api-helper';\r\nimport * as io from '@actions/io';\r\nimport * as path from 'path';\r\nimport * as refHelper from './ref-helper';\r\nimport * as stateHelper from './state-helper';\r\nimport * as urlHelper from './url-helper';\r\nexport function getSource(settings) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        // Repository URL\r\n        core.info(`Syncing repository: ${settings.repositoryOwner}/${settings.repositoryName}`);\r\n        const repositoryUrl = urlHelper.getFetchUrl(settings);\r\n        // Remove conflicting file path\r\n        if (fsHelper.fileExistsSync(settings.repositoryPath)) {\r\n            yield io.rmRF(settings.repositoryPath);\r\n        }\r\n        // Create directory\r\n        let isExisting = true;\r\n        if (!fsHelper.directoryExistsSync(settings.repositoryPath)) {\r\n            isExisting = false;\r\n            yield io.mkdirP(settings.repositoryPath);\r\n        }\r\n        // Git command manager\r\n        core.startGroup('Getting Git version info');\r\n        const git = yield getGitCommandManager(settings);\r\n        core.endGroup();\r\n        // Prepare existing directory, otherwise recreate\r\n        if (isExisting) {\r\n            yield gitDirectoryHelper.prepareExistingDirectory(git, settings.repositoryPath, repositoryUrl, settings.clean, settings.ref);\r\n        }\r\n        if (!git) {\r\n            // Downloading using REST API\r\n            core.info(`The repository will be downloaded using the GitHub REST API`);\r\n            core.info(`To create a local Git repository instead, add Git ${gitCommandManager.MinimumGitVersion} or higher to the PATH`);\r\n            if (settings.submodules) {\r\n                throw new Error(`Input 'submodules' not supported when falling back to download using the GitHub REST API. To create a local Git repository instead, add Git ${gitCommandManager.MinimumGitVersion} or higher to the PATH.`);\r\n            }\r\n            else if (settings.sshKey) {\r\n                throw new Error(`Input 'ssh-key' not supported when falling back to download using the GitHub REST API. To create a local Git repository instead, add Git ${gitCommandManager.MinimumGitVersion} or higher to the PATH.`);\r\n            }\r\n            yield githubApiHelper.downloadRepository(settings.authToken, settings.repositoryOwner, settings.repositoryName, settings.ref, settings.commit, settings.repositoryPath);\r\n            return;\r\n        }\r\n        // Save state for POST action\r\n        stateHelper.setRepositoryPath(settings.repositoryPath);\r\n        // Initialize the repository\r\n        if (!fsHelper.directoryExistsSync(path.join(settings.repositoryPath, '.git'))) {\r\n            core.startGroup('Initializing the repository');\r\n            yield git.init();\r\n            yield git.remoteAdd('origin', repositoryUrl);\r\n            core.endGroup();\r\n        }\r\n        // Disable automatic garbage collection\r\n        core.startGroup('Disabling automatic garbage collection');\r\n        if (!(yield git.tryDisableAutomaticGarbageCollection())) {\r\n            core.warning(`Unable to turn off git automatic garbage collection. The git fetch operation may trigger garbage collection and cause a delay.`);\r\n        }\r\n        core.endGroup();\r\n        const authHelper = gitAuthHelper.createAuthHelper(git, settings);\r\n        try {\r\n            // Configure auth\r\n            core.startGroup('Setting up auth');\r\n            yield authHelper.configureAuth();\r\n            core.endGroup();\r\n            // Determine the default branch\r\n            if (!settings.ref && !settings.commit) {\r\n                core.startGroup('Determining the default branch');\r\n                if (settings.sshKey) {\r\n                    settings.ref = yield git.getDefaultBranch(repositoryUrl);\r\n                }\r\n                else {\r\n                    settings.ref = yield githubApiHelper.getDefaultBranch(settings.authToken, settings.repositoryOwner, settings.repositoryName);\r\n                }\r\n                core.endGroup();\r\n            }\r\n            // LFS install\r\n            if (settings.lfs) {\r\n                yield git.lfsInstall();\r\n            }\r\n            // Fetch\r\n            core.startGroup('Fetching the repository');\r\n            if (settings.fetchDepth <= 0) {\r\n                // Fetch all branches and tags\r\n                let refSpec = refHelper.getRefSpecForAllHistory(settings.ref, settings.commit);\r\n                yield git.fetch(refSpec);\r\n                // When all history is fetched, the ref we're interested in may have moved to a different\r\n                // commit (push or force push). If so, fetch again with a targeted refspec.\r\n                if (!(yield refHelper.testRef(git, settings.ref, settings.commit))) {\r\n                    refSpec = refHelper.getRefSpec(settings.ref, settings.commit);\r\n                    yield git.fetch(refSpec);\r\n                }\r\n            }\r\n            else {\r\n                const refSpec = refHelper.getRefSpec(settings.ref, settings.commit);\r\n                yield git.fetch(refSpec, settings.fetchDepth);\r\n            }\r\n            core.endGroup();\r\n            // Checkout info\r\n            core.startGroup('Determining the checkout info');\r\n            const checkoutInfo = yield refHelper.getCheckoutInfo(git, settings.ref, settings.commit);\r\n            core.endGroup();\r\n            // LFS fetch\r\n            // Explicit lfs-fetch to avoid slow checkout (fetches one lfs object at a time).\r\n            // Explicit lfs fetch will fetch lfs objects in parallel.\r\n            if (settings.lfs) {\r\n                core.startGroup('Fetching LFS objects');\r\n                yield git.lfsFetch(checkoutInfo.startPoint || checkoutInfo.ref);\r\n                core.endGroup();\r\n            }\r\n            // Checkout\r\n            core.startGroup('Checking out the ref');\r\n            yield git.checkout(checkoutInfo.ref, checkoutInfo.startPoint);\r\n            core.endGroup();\r\n            // Submodules\r\n            if (settings.submodules) {\r\n                try {\r\n                    // Temporarily override global config\r\n                    core.startGroup('Setting up auth for fetching submodules');\r\n                    yield authHelper.configureGlobalAuth();\r\n                    core.endGroup();\r\n                    // Checkout submodules\r\n                    core.startGroup('Fetching submodules');\r\n                    yield git.submoduleSync(settings.nestedSubmodules);\r\n                    yield git.submoduleUpdate(settings.fetchDepth, settings.nestedSubmodules);\r\n                    yield git.submoduleForeach('git config --local gc.auto 0', settings.nestedSubmodules);\r\n                    core.endGroup();\r\n                    // Persist credentials\r\n                    if (settings.persistCredentials) {\r\n                        core.startGroup('Persisting credentials for submodules');\r\n                        yield authHelper.configureSubmoduleAuth();\r\n                        core.endGroup();\r\n                    }\r\n                }\r\n                finally {\r\n                    // Remove temporary global config override\r\n                    yield authHelper.removeGlobalAuth();\r\n                }\r\n            }\r\n            // Get commit information\r\n            const commitInfo = yield git.log1();\r\n            // Log commit sha\r\n            yield git.log1(\"--format='%H'\");\r\n            // Check for incorrect pull request merge commit\r\n            yield refHelper.checkCommitInfo(settings.authToken, commitInfo, settings.repositoryOwner, settings.repositoryName, settings.ref, settings.commit);\r\n        }\r\n        finally {\r\n            // Remove auth\r\n            if (!settings.persistCredentials) {\r\n                core.startGroup('Removing auth');\r\n                yield authHelper.removeAuth();\r\n                core.endGroup();\r\n            }\r\n        }\r\n    });\r\n}\r\nexport function cleanup(repositoryPath) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        // Repo exists?\r\n        if (!repositoryPath ||\r\n            !fsHelper.fileExistsSync(path.join(repositoryPath, '.git', 'config'))) {\r\n            return;\r\n        }\r\n        let git;\r\n        try {\r\n            git = yield gitCommandManager.createCommandManager(repositoryPath, false);\r\n        }\r\n        catch (_a) {\r\n            return;\r\n        }\r\n        // Remove auth\r\n        const authHelper = gitAuthHelper.createAuthHelper(git);\r\n        yield authHelper.removeAuth();\r\n    });\r\n}\r\nfunction getGitCommandManager(settings) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        core.info(`Working directory is '${settings.repositoryPath}'`);\r\n        try {\r\n            return yield gitCommandManager.createCommandManager(settings.repositoryPath, settings.lfs);\r\n        }\r\n        catch (err) {\r\n            // Git is required for LFS\r\n            if (settings.lfs) {\r\n                throw err;\r\n            }\r\n            // Otherwise fallback to REST API\r\n            return undefined;\r\n        }\r\n    });\r\n}\r\n","import * as core from '@actions/core';\r\nimport * as fsHelper from './fs-helper';\r\nimport * as github from '@actions/github';\r\nimport * as path from 'path';\r\nimport * as yaml from 'js-yaml';\r\nexport function getInputs() {\r\n    var repositoriesSettingsList = new Array();\r\n    var repositories = core.getInput('repositories');\r\n    core.debug(`Repositories = '${repositories}'`);\r\n    //var repositoriesList = repositories.split(\"\\n\")\r\n    var repositoriesYaml = yaml.safeLoad(repositories);\r\n    core.debug(`Repositories List = '${repositoriesYaml}'`);\r\n    for (let repo of repositoriesYaml) {\r\n        var result = {};\r\n        core.debug(`Downloading repo = '${repo}'`);\r\n        // GitHub workspace\r\n        let githubWorkspacePath = process.env['GITHUB_WORKSPACE'];\r\n        if (!githubWorkspacePath) {\r\n            throw new Error('GITHUB_WORKSPACE not defined');\r\n        }\r\n        githubWorkspacePath = path.resolve(githubWorkspacePath);\r\n        core.debug(`GITHUB_WORKSPACE = '${githubWorkspacePath}'`);\r\n        fsHelper.directoryExistsSync(githubWorkspacePath, true);\r\n        // Qualified repository\r\n        // Removing \"- \" from the repo name\r\n        var qualifiedRepository = repo;\r\n        core.debug(`qualified repository = '${qualifiedRepository}'`);\r\n        var splitRepository = qualifiedRepository.split('/');\r\n        if (splitRepository.length !== 2 ||\r\n            !splitRepository[0] ||\r\n            !splitRepository[1]) {\r\n            throw new Error(`Invalid repository '${qualifiedRepository}'. Expected format {owner}/{repo}.`);\r\n        }\r\n        result.repositoryOwner = splitRepository[0];\r\n        result.repositoryName = splitRepository[1];\r\n        // Repository path\r\n        var parentRepositoryPath = core.getInput('path') || '.';\r\n        result.repositoryPath = parentRepositoryPath + splitRepository[1];\r\n        result.repositoryPath = path.resolve(githubWorkspacePath, result.repositoryPath);\r\n        if (!(result.repositoryPath + path.sep).startsWith(githubWorkspacePath + path.sep)) {\r\n            throw new Error(`Repository path '${result.repositoryPath}' is not under '${githubWorkspacePath}'`);\r\n        }\r\n        core.debug(`Custom Repository Path: '${result.repositoryPath}'`);\r\n        // Workflow repository?\r\n        var isWorkflowRepository = qualifiedRepository.toUpperCase() ===\r\n            `${github.context.repo.owner}/${github.context.repo.repo}`.toUpperCase();\r\n        // Source branch, source version\r\n        result.ref = core.getInput('ref');\r\n        if (!result.ref) {\r\n            if (isWorkflowRepository) {\r\n                result.ref = github.context.ref;\r\n                result.commit = github.context.sha;\r\n                // Some events have an unqualifed ref. For example when a PR is merged (pull_request closed event),\r\n                // the ref is unqualifed like \"main\" instead of \"refs/heads/main\".\r\n                if (result.commit && result.ref && !result.ref.startsWith('refs/')) {\r\n                    result.ref = `refs/heads/${result.ref}`;\r\n                }\r\n            }\r\n        }\r\n        // SHA?\r\n        else if (result.ref.match(/^[0-9a-fA-F]{40}$/)) {\r\n            result.commit = result.ref;\r\n            result.ref = '';\r\n        }\r\n        core.debug(`ref = '${result.ref}'`);\r\n        core.debug(`commit = '${result.commit}'`);\r\n        // Clean\r\n        result.clean = (core.getInput('clean') || 'true').toUpperCase() === 'TRUE';\r\n        core.debug(`clean = ${result.clean}`);\r\n        // Fetch depth\r\n        result.fetchDepth = Math.floor(Number(core.getInput('fetch-depth') || '1'));\r\n        if (isNaN(result.fetchDepth) || result.fetchDepth < 0) {\r\n            result.fetchDepth = 0;\r\n        }\r\n        core.debug(`fetch depth = ${result.fetchDepth}`);\r\n        // LFS\r\n        result.lfs = (core.getInput('lfs') || 'false').toUpperCase() === 'TRUE';\r\n        core.debug(`lfs = ${result.lfs}`);\r\n        // Submodules\r\n        result.submodules = false;\r\n        result.nestedSubmodules = false;\r\n        var submodulesString = (core.getInput('submodules') || '').toUpperCase();\r\n        if (submodulesString == 'RECURSIVE') {\r\n            result.submodules = true;\r\n            result.nestedSubmodules = true;\r\n        }\r\n        else if (submodulesString == 'TRUE') {\r\n            result.submodules = true;\r\n        }\r\n        core.debug(`submodules = ${result.submodules}`);\r\n        core.debug(`recursive submodules = ${result.nestedSubmodules}`);\r\n        // Auth token\r\n        result.authToken = core.getInput('token', { required: true });\r\n        // SSH\r\n        result.sshKey = core.getInput('ssh-key');\r\n        result.sshKnownHosts = core.getInput('ssh-known-hosts');\r\n        result.sshStrict =\r\n            (core.getInput('ssh-strict') || 'true').toUpperCase() === 'TRUE';\r\n        // Persist credentials\r\n        result.persistCredentials =\r\n            (core.getInput('persist-credentials') || 'false').toUpperCase() === 'TRUE';\r\n        repositoriesSettingsList.push(result);\r\n    }\r\n    return repositoriesSettingsList;\r\n}\r\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport * as core from '@actions/core';\r\nimport * as coreCommand from '@actions/core/lib/command';\r\nimport * as gitSourceProvider from './git-source-provider';\r\nimport * as inputHelper from './input-helper';\r\nimport * as path from 'path';\r\nimport * as stateHelper from './state-helper';\r\nfunction run() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            const sourceSettingsList = inputHelper.getInputs();\r\n            try {\r\n                // Register problem matcher\r\n                coreCommand.issueCommand('add-matcher', {}, path.join(__dirname, 'problem-matcher.json'));\r\n                // Get sources\r\n                for (var sourceSettings of sourceSettingsList) {\r\n                    yield gitSourceProvider.getSource(sourceSettings);\r\n                }\r\n            }\r\n            finally {\r\n                // Unregister problem matcher\r\n                coreCommand.issueCommand('remove-matcher', { owner: 'checkout-git' }, '');\r\n            }\r\n        }\r\n        catch (error) {\r\n            core.setFailed(error.message);\r\n        }\r\n    });\r\n}\r\nfunction cleanup() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            yield gitSourceProvider.cleanup(stateHelper.RepositoryPath);\r\n        }\r\n        catch (error) {\r\n            core.warning(error.message);\r\n        }\r\n    });\r\n}\r\n// Main\r\nif (!stateHelper.IsPost) {\r\n    run();\r\n}\r\n// Post\r\nelse {\r\n    cleanup();\r\n}\r\n"],"mappingsxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACjpaxzGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;A","sourceRoot":""}